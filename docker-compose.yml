version: "3.8"

services:
  kong-db:
    image: postgres:${PSQL_VERSION:-13-alpine}
    container_name: kong-db
    ports:
      - "${PSQL_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${PSQL_DB:-kong}
      POSTGRES_USER: ${PSQL_USER:-kong}
      POSTGRES_PASSWORD: ${PSQL_PSWD:-kong}
      TZ: ${TIMEZONE:-"Asia/Bangkok"}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 5s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - kong_net
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: kong
    container_name: kong-migration
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: ${PSQL_DB:-kong}
      KONG_PG_USER: ${PSQL_USER:-kong}
      KONG_PG_PASSWORD: ${PSQL_PSWD:-kong}
    networks:
      - kong_net
    restart: on-failure

  kong-migrations-up:
    image: kong
    container_name: kong-migration-up
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: kong-db
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    networks:
      - kong_net
    restart: on-failure

  kong:
    image: kong:${KONG_VERSION:-latest}
    container_name: kong
    user: kong
    depends_on:
      - kong-db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: ${KONG_PROXY_LISTEN:-"0.0.0.0:8000, 0.0.0.0:8443 ssl http2"}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN:-"0.0.0.0:8001, 0.0.0.0:8444 ssl http2"}
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-db
      KONG_PG_DATABASE: ${PSQL_DB:-kong}
      KONG_PG_USER: ${PSQL_USER:-kong}
      KONG_PG_PASSWORD: ${PSQL_PSWD:-kong}
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      TZ: ${TIMEZONE:-"Asia/Bangkok"}

      # For use SSL in Kong
      #KONG_SSL: “on”
      #KONG_SSL_CERT: /etc/ssl/certs/nginx-selfsigned.crt
      #KONG_SSL_CERT_KEY: /etc/ssl/private/nginx-selfsigned.key
      #KONG_ADMIN_SSL_CERT: /etc/ssl/certs/nginx-selfsigned.crt
      #KONG_ADMIN_SSL_CERT_KEY: /etc/ssl/private/nginx-selfsigned.key
    networks:
      - kong_net
    ports:
      - "${KONG_HTTP:-80}:8000"
      - "${KONG_HTTPS:-443}:8443"
      - "${KONG_ADMIN:-8001}:8001"
      - "${KONG_MANAGE:-8444}:8444"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp

  konga:
    image: pantsel/konga:${KONGA_VERSION:-latest}
    container_name: konga
    volumes:
      - konga_data:/app/kongadata
    networks:
      - kong_net
    ports:
      - "${KONGA_PORT:-1337}:1337"
    environment:
      TZ: ${TIMEZONE:-"Asia/Bangkok"}
      KONGA_LOG_LEVEL: ${KONGA_LOG_LEVEL:-debug}
      HOST: http://kong
      PORT: 8001
      NODE_ENV: ${NODE:-development}
    links:
      - kong:kong
    restart: always

  prometheus:
    image: prom/prometheus:${PROMETHEUS_VERSION:-latest}
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/promtheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    restart: always
    networks:
      - kong_net
    environment:
      TZ: ${TIMEZONE:-"Asia/Bangkok"}

  node_exporter:
    image: prom/node-exporter:${NODEEXP_VERSION:-latest}
    container_name: node_exporter
    ports:
      - "${NODEEXP_PORT:-9100}:9100"
    networks:
      - kong_net
    restart: always

  grafana:
    image: grafana/grafana:${GRAFANA_VERSION:-8.2.6-ubuntu}
    container_name: grafana
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - kong_net
    environment:
      TZ: ${TIMEZONE:-"Asia/Bangkok"}
    restart: always

volumes:
  kong_data: {}
  konga_data: {}
  prometheus_data: {}
  grafana_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong_net:
    external: false
    driver: bridge
